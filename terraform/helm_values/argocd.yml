server:
  ingress:
    enabled: true
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/ssl-redirect: "443"
      alb.ingress.kubernetes.io/backend-protocol: HTTPS
      alb.ingress.kubernetes.io/certificate-arn: "${certificate_arn}"
      alb.ingress.kubernetes.io/load-balancer-name: "${name}-${env}-pub-alb"
      alb.ingress.kubernetes.io/group.name: ingress-external
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP": 80}]'
      alb.ingress.kubernetes.io/manage-backend-security-group-rules: "true"
      alb.ingress.kubernetes.io/security-groups: "${name}-${env}-external-ingress-sg"
      alb.ingress.kubernetes.io/load-balancer-attributes: routing.http2.enabled=true,idle_timeout.timeout_seconds=300, routing.http.drop_invalid_header_fields.enabled=true
      alb.ingress.kubernetes.io/target-group-attributes: deregistration_delay.timeout_seconds=30,load_balancing.algorithm.type=least_outstanding_requests
      alb.ingress.kubernetes.io/target-type: ip
      external-dns.alpha.kubernetes.io/hostname: "${hostname}"
    ingressClassName: "alb"
    hostname: "${hostname}"
    controller: aws
    aws:
      serviceType: ClusterIP

configs:
  # Git repository credential template
  # credentialTemplates:
  #   general:
  #     url: https://github.com
  #     password: "${git_password}"
  #     username: "${git_username}"
  params:
    server:
      insecure: true

global:
  domain: "${hostname}"
  tolerations:
    - key: "CriticalAddonsOnly"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"

## Notifications controller
notifications:
  enabled: false
  name: notifications-controller
  argocdUrl: "${hostname}"

  secret:
    create: true
    items:
      slack-token: "${slack_token}"
  notifiers:
    service.slack: |
      token: "${slack_token}"
      icon: ":argo:"
  subscriptions:
    - recipients:
      - slack:${slack_channel}-${env}
      triggers:
      - on-deployed
      - on-health-degraded
      - on-sync-failed
      - on-sync-running
      - on-sync-succeeded
  templates:
    template.app-deployed: |
      email:
        subject: New version of an application {{.app.metadata.name}} is up and running.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            },
            {
              "title": "Commit Message",
              "value": "{{ (call .strings.ReplaceAll (call .repo.GetCommitMetadata .app.status.sync.revision).Message "\n" "\\n" ) }}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
      teams:
        facts: |
          [{
            "name": "Sync Status",
            "value": "{{.app.status.sync.status}}"
          },
          {
            "name": "Repository",
            "value": "{{.app.spec.source.repoURL}}"
          },
          {
            "name": "Revision",
            "value": "{{.app.status.sync.revision}}"
          },
          {
            "title": "Commit Message",
            "value": "{{ (call .strings.ReplaceAll (call .repo.GetCommitMetadata .app.status.sync.revision).Message "\n" "\\n" ) }}",
            "short": true
          }
          {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "name": "{{$c.type}}",
              "value": "{{$c.message}}",
            }
          {{end}}
          ]
        potentialAction: |-
          [{
            "@type":"OpenUri",
            "name":"Operation Application",
            "targets":[{
              "os":"default",
              "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
            }]
          },
          {
            "@type":"OpenUri",
            "name":"Open Repository",
            "targets":[{
              "os":"default",
              "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
            }]
          }]
        title: New version of an application {{.app.metadata.name}} is up and running.
    template.app-health-degraded: |
      email:
        subject: Application {{.app.metadata.name}} has degraded.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#f4c030",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
            "name": "Revision",
            "value": "{{.app.status.sync.revision}}"
            },
            {
            "title": "Commit Message",
            "value": "{{ (call .strings.ReplaceAll (call .repo.GetCommitMetadata .app.status.sync.revision).Message "\n" "\\n" ) }}",
            "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
      teams:
        facts: |
          [{
            "name": "Sync Status",
            "value": "{{.app.status.sync.status}}"
          },
          {
            "name": "Repository",
            "value": "{{.app.spec.source.repoURL}}"
          },
          {
            "name": "Revision",
            "value": "{{.app.status.sync.revision}}"
          },
          {
            "title": "Commit Message",
            "value": "{{ (call .strings.ReplaceAll (call .repo.GetCommitMetadata .app.status.sync.revision).Message "\n" "\\n" ) }}",
            "short": true
          }
          {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "name": "{{$c.type}}",
              "value": "{{$c.message}}",
            }
          {{end}}
          ]
        potentialAction: |
          [{
            "@type":"OpenUri",
            "name":"Open Application",
            "targets":[{
              "os":"default",
              "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
            }]
          },
          {
            "@type":"OpenUri",
            "name":"Open Repository",
            "targets":[{
              "os":"default",
              "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
            }]
          }]
        title: Application {{.app.metadata.name}} has degraded.
    template.app-sync-failed: |
      email:
        subject: Failed to sync application {{.app.metadata.name}}.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
            "name": "Revision",
            "value": "{{.app.status.sync.revision}}"
            },
            {
            "title": "Commit Message",
            "value": "{{ (call .strings.ReplaceAll (call .repo.GetCommitMetadata .app.status.sync.revision).Message "\n" "\\n" ) }}",
            "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
      teams:
        facts: |
          [{
            "name": "Sync Status",
            "value": "{{.app.status.sync.status}}"
          },
          {
            "name": "Failed at",
            "value": "{{.app.status.operationState.finishedAt}}"
          },
          {
            "name": "Repository",
            "value": "{{.app.spec.source.repoURL}}"
          },
          {
            "name": "Revision",
            "value": "{{.app.status.sync.revision}}"
          },
          {
            "title": "Commit Message",
            "value": "{{ (call .strings.ReplaceAll (call .repo.GetCommitMetadata .app.status.sync.revision).Message "\n" "\\n" ) }}",
            "short": true
          }
          {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "name": "{{$c.type}}",
              "value": "{{$c.message}}",
            }
          {{end}}
          ]
        potentialAction: |-
          [{
            "@type":"OpenUri",
            "name":"Open Operation",
            "targets":[{
              "os":"default",
              "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
            }]
          },
          {
            "@type":"OpenUri",
            "name":"Open Repository",
            "targets":[{
              "os":"default",
              "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
            }]
          }]
        title: Failed to sync application {{.app.metadata.name}}.
    template.app-sync-succeeded: |
      email:
        subject: Start syncing application {{.app.metadata.name}}.
      message: |
        The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#0DADEA",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
            "name": "Revision",
            "value": "{{.app.status.sync.revision}}"
            },
            {
            "title": "Commit Message",
            "value": "{{ (call .strings.ReplaceAll (call .repo.GetCommitMetadata .app.status.sync.revision).Message "\n" "\\n" ) }}",
            "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
      teams:
        facts: |
          [{
            "name": "Sync Status",
            "value": "{{.app.status.sync.status}}"
          },
          {
            "name": "Started at",
            "value": "{{.app.status.operationState.startedAt}}"
          },
          {
            "name": "Repository",
            "value": "{{.app.spec.source.repoURL}}"
          },
          {
            "name": "Revision",
            "value": "{{.app.status.sync.revision}}"
          },
          {
            "title": "Commit Message",
            "value": "{{ (call .strings.ReplaceAll (call .repo.GetCommitMetadata .app.status.sync.revision).Message "\n" "\\n" ) }}",
            "short": true
          }
          {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "name": "{{$c.type}}",
              "value": "{{$c.message}}",
            }
          {{end}}
          ]
        potentialAction: |-
          [{
            "@type":"OpenUri",
            "name":"Open Operation",
            "targets":[{
              "os":"default",
              "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
            }]
          },
          {
            "@type":"OpenUri",
            "name":"Open Repository",
            "targets":[{
              "os":"default",
              "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
            }]
          }]
        title: Start syncing application {{.app.metadata.name}}.

  # -- The trigger defines the condition when the notification should be sent
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/
  triggers:
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.sync.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']
        
    defaultTriggers: |
      - on-sync-succeeded
